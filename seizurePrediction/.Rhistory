y = matrix(myTrainFile[["Survived"]][1: m], m, 1)
dim(y)
##parameters initialised
theta = matrix(0, nrow = n, ncol = 1)
#theta[1, 1] = 0.461429
#theta[2, 1] = -0.002613
theta
hTheta = matrix(0, m, 1)
##constants initialised
alpha = .00000006100051
##loop
for(i in 1:100)
{
hTheta = (x %*% theta)
print(hTheta)
theta = theta + (alpha * (t(x) %*% (y - hTheta)))
print(theta)
}
theta
plot(x[,2], y, xlab = "Age", ylab = "Survived")
abline(a = theta[1,1], b = theta[2,1], col = "blue")
abline(lm(myTrainFile$Survived ~ myTrainFile$Age), col = "red")
##comparison
lm(myTrainFile$Survived ~ myTrainFile$Age)
theta
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
lm(myTrainFile$Survived ~ myTrainFile$Age)
theta
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
theta
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
Age[is.na(Age)] <- mean(Age,na.rm=T)
##data set prepared
m = 891    ##number of rows = number of training examples
n = 3     ##number of parameters(features + 1)
x = matrix(nrow = m, ncol = n)
x[,1] = rep(1)
x[,2] = myTrainFile[["Age"]][1: m]
x[,3] = myTrainFile[["Sex"]][1: m]
dim(x)
Age[is.na(Age)]
mean(Age,na.rm=T)
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
plot(myTrainFile$Age, myTrainFile$Survived)
lm(myTrainFile$Survived ~ myTrainFile$Age)
abline(lm(myTrainFile$Survived ~ myTrainFile$Age))
glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial())
abline(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()))
attach(myTrainFile)
Age[is.na(Age)] <- mean(Age,na.rm=T)
##data set prepared
m = 891    ##number of rows = number of training examples
n = 3      ##number of parameters(features + 1)
x = matrix(nrow = m, ncol = n)
x[,1] = rep(1)
x[,2] = myTrainFile[["Age"]][1: m]
x[,3] = myTrainFile[["Sex"]][1: m]
dim(x)
y = matrix(myTrainFile[["Survived"]][1: m], m, 1)
dim(y)
##parameters initialised
theta = matrix(0, nrow = n, ncol = 1)
#theta[1, 1] = 0.461429
#theta[2, 1] = -0.002613
theta
hTheta = matrix(0, m, 1)
##constants initialised
#alpa = 2.3415 * 10 ^ (-31)
alpha = .000000003761000512041  ##dependent on dataset
##loop
for(i in 1:10000)
{
hTheta = (x %*% theta)
print(hTheta)
theta = theta + (alpha * (t(x) %*% (y - hTheta)))
print(theta)
}
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
theta
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
source("Work/likhai/ROOP/R/logisticRegression/linearRegression.R")
theta
theta
plot(x[,2], y, xlab = "Age", ylab = "Survived")
persp(x, expand = .2)
plot(x[,2], y, xlab = "Age", ylab = "Survived")
persp(x, expand = .5)
persp(x)
filePath = "Work/likhai/ROOP/R/logisticRegression"
fileName = "Work/likhai/ROOP/R/logisticRegression/train.csv"
list.files(filePath)
read.csv(fileName) -> myTrainFile
read.csv(paste(filePath,"/test.csv", sep = "")) -> myTestFile
plot(myTrainFile$Age, myTrainFile$Survived)
#lm(myTrainFile$Survived ~ myTrainFile$Age)
#abline(lm(myTrainFile$Survived ~ myTrainFile$Age))
glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial())
abline(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()))
attach(myTrainFile)
myTrainFile$Age[is.na(myTrainFile$Age)] <- mean(myTrainFile$Age,na.rm=T)
##data set prepared
m = 891    ##number of rows = number of training examples
abline(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()))
#lm(myTrainFile$Survived ~ myTrainFile$Age)
#abline(lm(myTrainFile$Survived ~ myTrainFile$Age))
glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial())
glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial())
abline(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()), col = "blue")
help("glm")
glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial())
abline(glm(myTrainFile$Survived ~ myTrainFile$Age, data = myTrainFile, family = binomial()), col = "blue")
glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial())
abline(glm(myTrainFile$Survived ~ myTrainFile$Age, col = "blue"))
glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial())
plot(myTrainFile$Survived ~ myTrainFile$Age, col = "red")
abline(glm(myTrainFile$Survived ~ myTrainFile$Age, col = "blue"))
attach(myTrainFile)
myTrainFile$Age[is.na(myTrainFile$Age)] <- mean(myTrainFile$Age,na.rm=T)
filePath = "Work/likhai/ROOP/R/logisticRegression"
fileName = "Work/likhai/ROOP/R/logisticRegression/train.csv"
list.files(filePath)
read.csv(fileName) -> myTrainFile
read.csv(paste(filePath,"/test.csv", sep = "")) -> myTestFile
plot(myTrainFile$Age, myTrainFile$Survived)
#lm(myTrainFile$Survived ~ myTrainFile$Age)
#abline(lm(myTrainFile$Survived ~ myTrainFile$Age))
glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial())
plot(myTrainFile$Survived ~ myTrainFile$Age, col = "red")
abline(glm(myTrainFile$Survived ~ myTrainFile$Age), col = "blue")
attach(myTrainFile)
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
list.files(filePath)
theta
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
theta
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
theta
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial())
plot(myTrainFile$Survived ~ myTrainFile$Age, col = "red")
abline(glm(myTrainFile$Survived ~ myTrainFile$Age), col = "blue")
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
print(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()))
plot(myTrainFile$Survived ~ myTrainFile$Age, col = "red")
abline(glm(myTrainFile$Survived ~ myTrainFile$Age), col = "blue")
print(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()))
plot(myTrainFile$Survived ~ myTrainFile$Age, col = "red")
abline(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()), col = "blue")
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
print(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()))
plot(myTrainFile$Survived ~ myTrainFile$Age, col = "red")
abline(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()), col = "blue")
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
install.packages("ggplot")
install.packages("ggplot2")
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
print(theta)
abline(theta[1,1], theta[2,1], col = "green")
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/linearRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
filePath = "Work/likhai/ROOP/R/logisticRegression"
fileName = "Work/likhai/ROOP/R/logisticRegression/train.csv"
list.files(filePath)
read.csv(fileName) -> myTrainFile
read.csv(paste(filePath,"/test.csv", sep = "")) -> myTestFile
plot(myTrainFile$Age, myTrainFile$Survived)
print(glm(myTrainFile$Survived ~ myTrainFile$Age, family = binomial()))
abline(glm(myTrainFile$Age ~ myTrainFile$Survived, family = binomial()), col = "blue")
attach(myTrainFile)
myTrainFile$Age[is.na(myTrainFile$Age)] <- mean(myTrainFile$Age,na.rm=T)
##data set prepared
m = 891    ##number of rows = number of training examples
n = 3      ##number of parameters(features + 1)
x = matrix(nrow = m, ncol = n)
x[,1] = rep(1)
x[,2] = myTrainFile[["Age"]][1: m]
x[,3] = myTrainFile[["Sex"]][1: m]
dim(x)
y = matrix(myTrainFile[["Survived"]][1: m], m, 1)
dim(y)
iterations = 6
theta = rep(0, ncol(x))
for(k in 1:iterations)
{
hTheta = x %*% theta
sigmoidH = 1.0 / (1.0 + exp(-hTheta))
fTheta = (1.0 / m) * (t(x) %*% (sigmoidH - y))
Hessian = (1.0 / m) * (diag(sigmoidH) * diag(1 - sigmoidH) * t(x) %*% (x))
theta = theta - (solve(Hessian) %*% fTheta)
print(theta)
}
abline(theta[1,1] - 3, theta[2,1], col = "green")
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
source('~/Work/likhai/ROOP/R/logisticRegression/logisticRegression.R')
update.packages()
a = c(1,2,3)
a
max(a)
##plots
b = 1:12
barplot(b)
hist(b)
a = matrix(1, 10, 10)
a[4, 6] = 10
barplot(a)
contour(a)
a[9,2] = 0
persp(a, expand = 0.95)
##built-in volcano data set as a matrix
print(volcano)
dim(volcano)
persp(volcano, expand = .5)
image(volcano)
##stats
mean(b)
barplot(b)
abline(h = mean(b))
abline(v = mean(b))
b[3] = 100
barplot(b)
abline(h = mean(b))
abline(h = median(b))
abline(h = mean(b) + sd(b)) ##sd = std deviation
##factors
fac = factor(c("wew", "asfw", "Afwe", "wew", "sf"))
fac
as.integer(fac)
levels(fac)
weights <- c(300, 200, 100, 250, 150)
prices <- c(9000, 5000, 12000, 7500, 18000)
##cex = size, col = color, bg = background color
plot(weights, prices)
plot(weights, prices, pch = as.integer(fac), cex = 5, col = "blue")
plot(weights, prices, pch = 11:14, cex = 5, col = "blue", bg = "green")
##bg applicable only for pch = 21:25
legend("topright", levels(fac), pch = 1:3, cex = 1, col = "blue")
legend("bottomleft", levels(fac), pch = 11:14, cex = 1, col = "blue", bg = "green")##density = 30
##data frames
treasure = data.frame(weights, prices, fac)
treasure[[2]] ##treasure[["prices"]] or treasure $ prices
treasure[[5, 3]] = NA
treasure
##files
filePath = "Work/likhai/ROOP/R/logisticRegression"
fileName = "Work/likhai/ROOP/R/logisticRegression/train.csv"
list.files(filePath)
read.csv(fileName) -> myTrainFile
read.csv(paste(filePath,"/test.csv", sep = "")) -> myTestFile
attach(myTrainFile)
attach(myTestFile)
merge(x = myTrainFile, y = myTestFile, all = T, sort = T)##for rows with nothing in common
##linear regression
?lm
##logistics regression
?glm
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
setwd("~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction")
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
setwd("~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction")
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
testData1 = read.csv("test_1_set.csv")
testData1 = testData[3:ncol(testData)]
actualOutput1 = predict(model1, testData1, type="response", probability = T)
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
View(result)
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
write.table(result, "Result1.csv", quote = F, row.names = F, col.names = T, sep=",")
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
train[, 1:ncol(train)]
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
train = Mod(fft(train[1:ncol(train)], colnames = T)
)
x = train[1:ncol(train)]
names(x) = NULL
x
y = Mod(fft(x))
x = as.matrix(train)
x
x = as.matrix(train, Quote = F)
x
x = as.matrix(train, quote = F)
x
x = as.matrix(as.numeric(train))
x = as.numeric(as.matrix(train))
x
1 == 2
testData1 = train1[1:ncol(train1) - 1]
testData2 = train2[1:ncol(train2) - 1]
testData3 = train3[1:ncol(train3) - 1]
testData = rbind(testData1, testData2)
testData = rbind(testData, testData3)
expectedOutput = rbind(train1$class, train2$class)
View(expectedOutput)
View(expectedOutput)
testData = cbind(testData1, testData2)
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/loadTrainFeatures.R')
library(stats)
pcaTrainModel = prcomp(train)
train(is.na) = 0
train(is.na(train)) = 0
train[is.na(train)] = 0
pcaTrainModel = prcomp(train)
print(pcaTrainModel)
print(head(pcaTrainModel))
print(head(pcaTrainModel, 6))
print(head(pcaTrainModel[1:6,]))
print(pcaTrainModel[1:6,])
pcaTrainModel[[PC1]]
pcaTrainModel$PC1
summary(pcaTrainModel)
predict(pcaTrainModel, newdata=tail(train, 2))
pcaTrainModel = pcaTrainModel[, 1:16]
pcaTrainData = predict(pcaTrainModel, train)
pcaTrainData
pcaTrainData = predict(pcaTrainModel, train)[, 1:16]
pcaTrainData
write.table(pcaTrainData, "pcaData.csv", quote=F, row.names=F, col.names=T, sep=",")
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/loadTrainFeatures.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/loadTrainFeatures.R')
library(stats)
train[is.na(train)] = 0
pcaTrainModel = prcomp(train[, 1:ncol(train) - 1])
summary(pcaTrainModel)
pcaTrainData = predict(pcaTrainModel, train)[, 1:16]
write.table(pcaTrainData, "pcaData.csv", quote=F, row.names=F, col.names=T, sep=",")
trainSet = read.csv("features/pcaData.csv")
trainSet = read.csv("pcaData.csv")
trainSet$class = train$class
model = glm(class ~ ., data = trainset, family = binomial(), maxit = 2000)
model = glm(class ~ ., data = trainSet, family = binomial(), maxit = 2000)
print(summary(model))
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/loadTrainFeatures.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/loadTrainFeatures.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/pca.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
testData1 = read.csv("features/test_1_set.csv")
testData2 = read.csv("features/test_2_set.csv")
testData3 = read.csv("features/test_3_set.csv")
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/loadTrainFeatures.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/pca.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/testPCA.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/svm.R')
View(testDataValues)
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/testPCA.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/svm.R')
predictedOutput = data.matrix(predictedOutput)
print(predictedOutput)
predictedOutput = data.matrix(as.numeric(predictedOutput))
print(predictedOutput)
View(predictedOutput)
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/svm.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/svm.R')
print(summary(predictedOutput))
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/svm.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/svm.R')
fft(pcaTrainData)
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/pca.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/pca.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/testPCA.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegressionTrain.R')
source('~/Desktop/cHEMICAL lOCHA/Sem 3/machineLearning/seizurePrediction/implementation/seizurePrediction/logisticRegression.R')
